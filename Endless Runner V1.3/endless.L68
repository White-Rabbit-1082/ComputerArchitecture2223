00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/03/2023 18:53:10

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  
00001000                            25  *-----------------------------------------------------------
00001000                            26  * Section       : Charater Setup
00001000                            27  * Description   : Size of Player and Enemy and properties
00001000                            28  * of these characters e.g Starting Positions and Sizes
00001000                            29  *-----------------------------------------------------------
00001000  =0000000C                 30  PLYR_W_INIT EQU         12          ; Players initial Width
00001000  =0000000C                 31  PLYR_H_INIT EQU         12          ; Players initial Height
00001000                            32  
00001000  =0000000F                 33  PLYR_DFLT_V EQU         15           ; Default Player Velocity
00001000  =FFFFFFF1                 34  PLYR_JUMP_V EQU        -15          ; Player Jump Velocity
00001000  =00000001                 35  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            36  
00001000  =00000001                 37  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 38  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            39  
00001000  =00000000                 40  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 41  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000                            42  ;OPPS_INDEX  EQU        02          ; Player Opps Sound Index
00001000  =00000003                 43  GAME_OVER_INDEX EQU     03
00001000  =00000002                 44  HIT_INDEX   EQU         02
00001000  =00000004                 45  MAIN_MUSIC_INDEX EQU    04
00001000                            46  
00001000                            47  
00001000                            48  
00001000  =00000008                 49  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 50  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            51  
00001000                            52  *-----------------------------------------------------------
00001000                            53  * Section       : Game Stats
00001000                            54  * Description   : Points
00001000                            55  *-----------------------------------------------------------
00001000  =00000001                 56  POINTS      EQU         01          ; Points added
00001000                            57  
00001000                            58  *-----------------------------------------------------------
00001000                            59  * Section       : Keyboard Keys
00001000                            60  * Description   : Spacebar and Escape or two functioning keys
00001000                            61  * Spacebar to JUMP and Escape to Exit Game
00001000                            62  *-----------------------------------------------------------
00001000  =00000020                 63  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 64  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            65  
00001000                            66  *-----------------------------------------------------------
00001000                            67  * Subroutine    : Initialise
00001000                            68  * Description   : Initialise game data into memory such as 
00001000                            69  * sounds and screen size
00001000                            70  *-----------------------------------------------------------
00001000                            71  
00001000                            72  ;
00001000                            73  ;    WHILE <T> DO        
00001000                            74  ;        IF TEMP_SCORE / #100 EQ #0 THEN
00001000                            75  ;            ADD PLYR_VELOCITY,#1  
00001000                            76  ;        ENDI  
00001000                            77  ;    ENDW
00001000                            78  
00001000                            79  
00001000                            80  
00001000                            81      
00001000                            82  INITIALISE:
00001000                            83      ; Initialise Sounds
00001000  6100 0274                 84      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 028E                 85      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 02A8                 86      BSR     GAME_OVER_LOAD          ; Load Game Over into Memory
0000100C  6100 02C2                 87      BSR     HIT_LOAD                ; Load Hit Sound into Memory
00001010                            88      
00001010                            89      ;BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
00001010                            90  
00001010                            91      ; Screen Size
00001010  103C 0021                 92      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001014  7200                      93      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001016  4E4F                      94      TRAP    #15                     ; interpret D0 and D1 for screen size
00001018  33C1 000014A0             95      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101E  4841                      96      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001020  33C1 0000149E             97      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001026                            98  
00001026                            99      ; Place the Player at the center of the screen
00001026  4281                     100      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001028  3239 0000149E            101      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102E  82FC 0002                102      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001032  23C1 000014A6            103      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001038                           104  
00001038  4281                     105      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000103A  3239 000014A0            106      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001040  82FC 0002                107      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001044  23C1 000014AA            108      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000104A                           109  
0000104A                           110      ; Initialise Player Score
0000104A  4281                     111      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  7200                     112      MOVE.L  #00,        D1          ; Init Score
0000104E  23C1 000014AE            113      MOVE.L  D1,         PLAYER_SCORE
00001054                           114  
00001054                           115      ; Initialise Player Velocity
00001054  4281                     116      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001056  123C 000F                117      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
0000105A  23C1 000014B6            118      MOVE.L  D1,         PLYR_VELOCITY
00001060                           119  
00001060                           120      ; Initialise Player Gravity
00001060  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001062  7201                     122      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001064  23C1 000014BA            123      MOVE.L  D1,         PLYR_GRAVITY
0000106A                           124  
0000106A                           125      ; Initialize Player on Ground
0000106A  23FC 00000001 000014BE   126      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001074                           127  
00001074                           128      ; Initial Position for Enemy
00001074  4281                     129      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001076  3239 0000149E            130      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000107C  23C1 000014C2            131      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001082                           132  
00001082  4281                     133      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001084  3239 000014A0            134      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000108A  82FC 0002                135      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000108E  23C1 000014C6            136      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001094                           137  
00001094                           138      ; Enable the screen back buffer(see easy 68k help)
00001094  103C 005C                139      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001098  123C 0011                140      MOVE.B  #17,        D1          ; Combine Tasks
0000109C  4E4F                     141      TRAP    #15                     ; Trap (Perform action)
0000109E                           142  
0000109E                           143      ; Clear the screen (see easy 68k help)
0000109E  103C 000B                144      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000010A2  323C FF00                145      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A6  4E4F                     146      TRAP    #15                     ; Trap (Perform action)
000010A8                           147      
000010A8                           148      ;SET LIVES TO 3----------------------------------------------------
000010A8  58B9 000014CA            149      ADD.L #4,LIVES
000010AE                           150      
000010AE                           151      
000010AE                           152  
000010AE                           153  *-----------------------------------------------------------
000010AE                           154  * Subroutine    : Game
000010AE                           155  * Description   : Game including main GameLoop. GameLoop is like
000010AE                           156  * a while loop in that it runs forever until interupted
000010AE                           157  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010AE                           158  *-----------------------------------------------------------
000010AE                           159  GAME:
000010AE  6100 0250                160      BSR     PLAY_MAIN_MUSIC                ; Play Run Wav
000010B2                           161      
000010B2                           162      
000010B2                           163      
000010B2                           164  GAMELOOP:
000010B2                           165      ; Main Gameloop
000010B2                           166      
000010B2  7008                     167      MOVEQ        #8,d0                * get time in 1/100 ths seconds
000010B4  4E4F                     168      TRAP        #15
000010B6                           169      
000010B6  2F01                     170      MOVE.l    d1,-(sp)            * push time on the stack
000010B8  6100 0026                171      BSR     INPUT                   ; Check Keyboard Input
000010BC  6100 0068                172      BSR     UPDATE                  ; Update positions and points
000010C0  6100 0136                173      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010C4  6100 02AE                174      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010C8  6100 00B4                175      BSR     DRAW                    ; Draw the Scene
000010CC  6100 0232                176      BSR     PLAY_MAIN_MUSIC         ; Play Main Music
000010D0  2E1F                     177      MOVE.l    (sp)+,d7
000010D2                           178  wait:
000010D2  7008                     179      MOVEQ        #8,d0                * get time in 1/100 ths seconds
000010D4  4E4F                     180      TRAP        #15
000010D6                           181  
000010D6  9287                     182      SUB.l        d7,d1                * subtract previous time from current time
000010D8  B23C 0002                183      CMP.b        #2,d1                * compare with 9/100ths
000010DC  6BF4                     184      BMI.s        wait                * loop if time not up yet
000010DE  60D2                     185      BRA        GAMELOOP                * loop forever
000010E0                           186  
000010E0                           187  *-----------------------------------------------------------
000010E0                           188  * Subroutine    : Input
000010E0                           189  * Description   : Process Keyboard Input
000010E0                           190  *-----------------------------------------------------------
000010E0                           191  
000010E0                           192  INPUT:
000010E0                           193      ; Process Input
000010E0  4281                     194      CLR.L   D1                      ; Clear Data Register
000010E2  103C 0013                195      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010E6  4E4F                     196      TRAP    #15                     ; Trap (Perform action)
000010E8  1401                     197      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010EA  B43C 0000                198      CMP.B   #00,        D2          ; Key is pressed
000010EE  6700 000E                199      BEQ     PROCESS_INPUT           ; Process Key
000010F2  4E4F                     200      TRAP    #15                     ; Trap for Last Key
000010F4                           201      ; Check if key still pressed
000010F4  B23C 00FF                202      CMP.B   #$FF,       D1          ; Is it still pressed
000010F8  6700 0004                203      BEQ     PROCESS_INPUT           ; Process Last Key
000010FC  4E75                     204      RTS                             ; Return to subroutine
000010FE                           205  
000010FE                           206  
000010FE                           207  *-----------------------------------------------------------
000010FE                           208  * Subroutine    : Process Input
000010FE                           209  * Description   : Branch based on keys pressed
000010FE                           210  *-----------------------------------------------------------
000010FE                           211  PROCESS_INPUT:
000010FE  23C2 000014A2            212      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001104  0CB9 0000001B 000014A2   213      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000110E  6700 02F4                214      BEQ     GAME_OVER                    ; Exit if Escape
00001112  0CB9 00000020 000014A2   215      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
0000111C  6700 012E                216      BEQ     JUMP                    ; Jump
00001120  6000 014E                217      BRA     IDLE                    ; Or Idle
00001124  4E75                     218      RTS                             ; Return to subroutine
00001126                           219  
00001126                           220  
00001126                           221  
00001126                           222  
00001126                           223  *-----------------------------------------------------------
00001126                           224  * Subroutine    : Update
00001126                           225  * Description   : Main update loop update Player and Enemies
00001126                           226  *-----------------------------------------------------------
00001126                           227  UPDATE:
00001126                           228      ; Update the Players Positon based on Velocity and Gravity
00001126  4281                     229      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001128  2239 000014B6            230      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000112E  2439 000014BA            231      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001134  D282                     232      ADD.L   D2,         D1          ; Add Gravity to Velocity
00001136  23C1 000014B6            233      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000113C  D2B9 000014AA            234      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001142  23C1 000014AA            235      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
00001148                           236  
00001148                           237      ; Move the Enemy
00001148  4281                     238      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000114A  4281                     239      CLR.L   D1                      ; Clear the contents of D0
0000114C  2239 000014C2            240      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001152  B2BC 00000000            241      CMP.L   #00,        D1
00001158  6F00 0014                242      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000115C  6000 0004                243      BRA     MOVE_ENEMY              ; Move the Enemy
00001160                           244  
00001160  4E75                     245      RTS                             ; Return to subroutine  
00001162                           246  
00001162                           247  *-----------------------------------------------------------
00001162                           248  * Subroutine    : Move Enemy
00001162                           249  * Description   : Move Enemy Right to Left
00001162                           250  *-----------------------------------------------------------
00001162                           251  
00001162  =0000000A                252  SUB_AMOUNT EQU 10
00001162                           253  
00001162                           254  MOVE_ENEMY:
00001162  04B9 0000000A 000014C2   255      SUB.L   #SUB_AMOUNT, ENEMY_X     ; Move enemy by X Value
0000116C  4E75                     256      RTS
0000116E                           257  
0000116E                           258  *-----------------------------------------------------------
0000116E                           259  * Subroutine    : Reset Enemy
0000116E                           260  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000116E                           261  *-----------------------------------------------------------
0000116E                           262  RESET_ENEMY_POSITION:
0000116E  4281                     263      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001170  3239 0000149E            264      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001176  23C1 000014C2            265      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000117C  4E75                     266      RTS
0000117E                           267  
0000117E                           268  *-----------------------------------------------------------
0000117E                           269  * Subroutine    : Draw
0000117E                           270  * Description   : Draw Screen
0000117E                           271  *-----------------------------------------------------------
0000117E                           272  DRAW: 
0000117E                           273      ; Enable back buffer
0000117E  103C 005E                274      MOVE.B  #94,        D0
00001182  4E4F                     275      TRAP    #15
00001184                           276  
00001184                           277      ; Clear the screen
00001184  103C 000B                278      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001188  323C FF00                279      MOVE.W  #$FF00,     D1          ; Clear contents
0000118C  4E4F                     280      TRAP    #15                     ; Trap (Perform action)
0000118E                           281  
0000118E  6100 000C                282      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001192  6100 0178                283      BSR     DRAW_PLAYER             ; Draw Player
00001196  6100 01AC                284      BSR     DRAW_ENEMY              ; Draw Enemy
0000119A  4E75                     285      RTS                             ; Return to subroutine
0000119C                           286  
0000119C                           287  *-----------------------------------------------------------
0000119C                           288  * Subroutine    : Draw Player Data
0000119C                           289  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
0000119C                           290  *-----------------------------------------------------------
0000119C                           291  DRAW_PLYR_DATA:
0000119C  4281                     292      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000119E                           293  
0000119E                           294      ; Player Lives Message-------------------------------------------------------------------------
0000119E  103C 000B                295      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011A2  323C 4001                296      MOVE.W  #$4001,     D1          ; Col 02, Row 01
000011A6  4E4F                     297      TRAP    #15                     ; Trap (Perform action)
000011A8  43F9 0000145B            298      LEA     LIVES_MSG,  A1          ; Score Message
000011AE  303C 000D                299      MOVE    #13,        D0          ; No Line feed
000011B2  4E4F                     300      TRAP    #15                     ; Trap (Perform action)
000011B4                           301      
000011B4                           302      ;Lives Value-----------------------------------------------------------------------------------
000011B4  103C 000B                303      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011B8  323C 4801                304      MOVE.W  #$4801,     D1            ; Col 09, Row 01
000011BC  4E4F                     305      TRAP    #15                     ; Trap (Perform action)
000011BE  103C 0003                306      MOVE.B  #03,        D0          ; Display number at D1.L
000011C2  2239 000014CA            307      MOVE.L  LIVES,      D1         ; Move Score to D1.L
000011C8  4E4F                     308      TRAP    #15     
000011CA                           309  
000011CA                           310      ;Score Message-------------------------------------------------------------------------
000011CA  103C 000B                311      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011CE  323C 4002                312      MOVE.W  #$4002,     D1          ; Col 02, Row 01
000011D2  4E4F                     313      TRAP    #15                     ; Trap (Perform action)
000011D4  43F9 00001464            314      LEA     NEW_SCORE_MSG,  A1          ; Score Message
000011DA  303C 000D                315      MOVE    #13,        D0          ; No Line feed
000011DE  4E4F                     316      TRAP    #15                     ; Trap (Perform action)
000011E0                           317      
000011E0                           318      ;New Score Value-----------------------------------------------------------------------------------
000011E0  103C 000B                319      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011E4  323C 4802                320      MOVE.W  #$4802,     D1            ; Col 09, Row 01
000011E8  4E4F                     321      TRAP    #15                     ; Trap (Perform action)
000011EA  103C 0003                322      MOVE.B  #03,        D0          ; Display number at D1.L
000011EE  2239 000014B2            323      MOVE.L  TEMP_SCORE,      D1         ; Move Score to D1.L
000011F4  4E4F                     324      TRAP    #15     
000011F6                           325      
000011F6                           326  
000011F6  4E75                     327      RTS  
000011F8                           328      
000011F8                           329  *-----------------------------------------------------------
000011F8                           330  * Subroutine    : Player is on Ground
000011F8                           331  * Description   : Check if the Player is on or off Ground
000011F8                           332  *-----------------------------------------------------------
000011F8                           333  IS_PLAYER_ON_GND:
000011F8                           334      ; Check if Player is on Ground
000011F8  4281                     335      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011FA  4282                     336      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000011FC  3239 000014A0            337      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001202  82FC 0002                338      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001206  2439 000014AA            339      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000120C  B441                     340      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
0000120E  6C00 0008                341      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001212  6D00 002C                342      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001216  4E75                     343      RTS                             ; Return to subroutine
00001218                           344  
00001218                           345  
00001218                           346  *-----------------------------------------------------------
00001218                           347  * Subroutine    : On Ground
00001218                           348  * Description   : Set the Player On Ground
00001218                           349  *-----------------------------------------------------------
00001218                           350  SET_ON_GROUND:
00001218  4281                     351      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000121A  3239 000014A0            352      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001220  82FC 0002                353      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001224  23C1 000014AA            354      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000122A  4281                     355      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000122C  7200                     356      MOVE.L  #00,        D1          ; Player Velocity
0000122E  23C1 000014B6            357      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00001234  23FC 00000001 000014BE   358      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
0000123E  4E75                     359      RTS
00001240                           360  
00001240                           361  *-----------------------------------------------------------
00001240                           362  * Subroutine    : Off Ground
00001240                           363  * Description   : Set the Player Off Ground
00001240                           364  *-----------------------------------------------------------
00001240                           365  SET_OFF_GROUND:
00001240  23FC 00000000 000014BE   366      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
0000124A  4E75                     367      RTS                             ; Return to subroutine
0000124C                           368  *-----------------------------------------------------------
0000124C                           369  * Subroutine    : Jump
0000124C                           370  * Description   : Perform a Jump
0000124C                           371  *-----------------------------------------------------------
0000124C                           372  JUMP:
0000124C  0CB9 00000001 000014BE   373      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
00001256  6700 0006                374      BEQ     PERFORM_JUMP            ; Do Jump
0000125A  6000 0012                375      BRA     JUMP_DONE               ;
0000125E                           376  PERFORM_JUMP:
0000125E  6100 0046                377      BSR     PLAY_JUMP               ; Play jump sound
00001262  23FC FFFFFFF1 000014B6   378      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
0000126C  4E75                     379      RTS                             ; Return to subroutine
0000126E                           380  JUMP_DONE:
0000126E  4E75                     381      RTS                             ; Return to subroutine
00001270                           382  
00001270                           383  *-----------------------------------------------------------
00001270                           384  * Subroutine    : Idle
00001270                           385  * Description   : Perform a Idle
00001270                           386  *----------------------------------------------------------- 
00001270                           387  IDLE:
00001270  6100 008E                388      BSR     PLAY_MAIN_MUSIC                ; Play Run Wav
00001274  4E75                     389      RTS                             ; Return to subroutine
00001276                           390  
00001276                           391  *-----------------------------------------------------------
00001276                           392  * Subroutines   : Sound Load and Play
00001276                           393  * Description   : Initialise game sounds into memory 
00001276                           394  * Current Sounds are RUN, JUMP and Opps for Collision
00001276                           395  *-----------------------------------------------------------
00001276                           396  RUN_LOAD:
00001276  43F9 000014D7            397      LEA     RUN_WAV,    A1          ; Load Wav File into A1
0000127C  323C 0000                398      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001280  303C 0047                399      MOVE    #71,        D0          ; Load into memory
00001284  4E4F                     400      TRAP    #15                     ; Trap (Perform action)
00001286  4E75                     401      RTS                             ; Return to subroutine
00001288                           402  
00001288                           403  PLAY_RUN:
00001288  323C 0000                404      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
0000128C  303C 0048                405      MOVE    #72,        D0          ; Play Sound
00001290  4E4F                     406      TRAP    #15                     ; Trap (Perform action)
00001292  4E75                     407      RTS                             ; Return to subroutine
00001294                           408  
00001294                           409  JUMP_LOAD:
00001294  43F9 000014CE            410      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
0000129A  323C 0001                411      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
0000129E  303C 0047                412      MOVE    #71,        D0          ; Load into memory
000012A2  4E4F                     413      TRAP    #15                     ; Trap (Perform action)
000012A4  4E75                     414      RTS                             ; Return to subroutine
000012A6                           415  
000012A6                           416  PLAY_JUMP:
000012A6  323C 0001                417      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000012AA  303C 0048                418      MOVE    #72,        D0          ; Play Sound
000012AE  4E4F                     419      TRAP    #15                     ; Trap (Perform action)
000012B0  4E75                     420      RTS                             ; Return to subroutine
000012B2                           421  
000012B2                           422  ;OPPS_LOAD:
000012B2                           423  ;    LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000012B2                           424  ;    MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000012B2                           425  ;    MOVE    #71,        D0          ; Load into memory
000012B2                           426  ;    TRAP    #15                     ; Trap (Perform action)
000012B2                           427  ;    RTS                             ; Return to subroutine
000012B2                           428  
000012B2                           429  ;PLAY_OPPS:
000012B2                           430  ;    MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000012B2                           431  ;    MOVE    #72,        D0          ; Play Sound
000012B2                           432  ;    TRAP    #15                     ; Trap (Perform action)
000012B2                           433  ;    RTS                             ; Return to subroutine
000012B2                           434  
000012B2                           435  GAME_OVER_LOAD:
000012B2  43F9 000014E8            436      LEA     GAME_OVER_WAV,    A1     ; Load Wav File into A1
000012B8  323C 0003                437      MOVE    #GAME_OVER_INDEX, D1     ; Assign it INDEX
000012BC  303C 0047                438      MOVE    #71,        D0          ; Load into memory
000012C0  4E4F                     439      TRAP    #15                     ; Trap (Perform action)
000012C2  4E75                     440      RTS                             ; Return to subroutine
000012C4                           441  
000012C4                           442  PLAY_GAME_OVER:
000012C4  323C 0003                443      MOVE    #GAME_OVER_INDEX, D1    ; Load Sound INDEX
000012C8  303C 0048                444      MOVE    #72,        D0          ; Play Sound
000012CC  4E4F                     445      TRAP    #15                     ; Trap (Perform action)
000012CE  4E75                     446      RTS                             ; Return to subroutine
000012D0                           447  
000012D0                           448  HIT_LOAD:
000012D0  43F9 000014F6            449      LEA     HIT_WAV,    A1     ; Load Wav File into A1
000012D6  323C 0002                450      MOVE    #HIT_INDEX, D1     ; Assign it INDEX
000012DA  303C 0047                451      MOVE    #71,        D0          ; Load into memory
000012DE  4E4F                     452      TRAP    #15                     ; Trap (Perform action)
000012E0  4E75                     453      RTS                             ; Return to subroutine
000012E2                           454  
000012E2                           455  PLAY_HIT:
000012E2  323C 0002                456      MOVE    #HIT_INDEX, D1          ; Load Sound INDEX
000012E6  303C 0048                457      MOVE    #72,        D0          ; Play Sound
000012EA  4E4F                     458      TRAP    #15                     ; Trap (Perform action)
000012EC  4E75                     459      RTS                             ; Return to subroutine
000012EE                           460      
000012EE                           461  MAIN_MUSIC_LOAD:
000012EE  43F9 000014FE            462      LEA     MAIN_MUSIC_WAV,   A1          ; Load Wav File into A1
000012F4  323C 0004                463      MOVE    #MAIN_MUSIC_INDEX,D1          ; Assign it INDEX
000012F8  303C 0047                464      MOVE    #71,        D0          ; Load into memory
000012FC  4E4F                     465      TRAP    #15                     ; Trap (Perform action)
000012FE  4E75                     466      RTS                             ; Return to subroutine
00001300                           467  
00001300                           468  PLAY_MAIN_MUSIC:
00001300  323C 0004                469      MOVE    #MAIN_MUSIC_INDEX,D1    ; Load Sound INDEX
00001304  303C 0048                470      MOVE    #72,        D0          ; Play Sound
00001308  4E4F                     471      TRAP    #15                     ; Trap (Perform action)
0000130A  4E75                     472      RTS                             ; Return to subroutine
0000130C                           473  
0000130C                           474  
0000130C                           475  
0000130C                           476  *-----------------------------------------------------------
0000130C                           477  * Subroutine    : Draw Player
0000130C                           478  * Description   : Draw Player Square
0000130C                           479  *-----------------------------------------------------------
0000130C                           480  DRAW_PLAYER:
0000130C                           481      ; Set Pixel Colors
0000130C  223C 00FFFFFF            482      MOVE.L  #WHITE,     D1          ; Set Background color
00001312  103C 0050                483      MOVE.B  #80,        D0          ; Task for Background Color
00001316  4E4F                     484      TRAP    #15                     ; Trap (Perform action)
00001318                           485  
00001318                           486      ; Set X, Y, Width and Height
00001318  2239 000014A6            487      MOVE.L  PLAYER_X,   D1          ; X
0000131E  2439 000014AA            488      MOVE.L  PLAYER_Y,   D2          ; Y
00001324  2639 000014A6            489      MOVE.L  PLAYER_X,   D3
0000132A  0683 0000000C            490      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001330  2839 000014AA            491      MOVE.L  PLAYER_Y,   D4 
00001336  0684 0000000C            492      ADD.L   #PLYR_H_INIT,   D4      ; Height
0000133C                           493      
0000133C                           494      ; Draw Player
0000133C  103C 0057                495      MOVE.B  #87,        D0          ; Draw Player
00001340  4E4F                     496      TRAP    #15                     ; Trap (Perform action)
00001342  4E75                     497      RTS                             ; Return to subroutine
00001344                           498  
00001344                           499  *-----------------------------------------------------------
00001344                           500  * Subroutine    : Draw Enemy
00001344                           501  * Description   : Draw Enemy Square
00001344                           502  *-----------------------------------------------------------
00001344                           503  DRAW_ENEMY:
00001344                           504      ; Set Pixel Colors
00001344  223C 000000FF            505      MOVE.L  #RED,       D1          ; Set Background color
0000134A  103C 0050                506      MOVE.B  #80,        D0          ; Task for Background Color
0000134E  4E4F                     507      TRAP    #15                     ; Trap (Perform action)
00001350                           508  
00001350                           509      ; Set X, Y, Width and Height
00001350  2239 000014C2            510      MOVE.L  ENEMY_X,    D1          ; X
00001356  2439 000014C6            511      MOVE.L  ENEMY_Y,    D2          ; Y
0000135C  2639 000014C2            512      MOVE.L  ENEMY_X,    D3
00001362  5083                     513      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001364  2839 000014C6            514      MOVE.L  ENEMY_Y,    D4 
0000136A  5084                     515      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000136C                           516      
0000136C                           517      ; Draw Enemy    
0000136C  103C 0057                518      MOVE.B  #87,        D0          ; Draw Enemy
00001370  4E4F                     519      TRAP    #15                     ; Trap (Perform action)
00001372  4E75                     520      RTS                             ; Return to subroutine
00001374                           521  
00001374                           522  
00001374                           523  
00001374                           524  
00001374                           525  
00001374                           526  *-----------------------------------------------------------
00001374                           527  * Subroutine    : Collision Check
00001374                           528  * Description   : Axis-Aligned Bounding Box Collision Detection
00001374                           529  * Algorithm checks for overlap on the 4 sides of the Player and 
00001374                           530  * Enemy rectangles
00001374                           531  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001374                           532  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001374                           533  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001374                           534  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001374                           535  *-----------------------------------------------------------
00001374                           536  
00001374                           537  
00001374                           538  CHECK_COLLISIONS:
00001374  4281                     539      CLR.L   D1                      ; Clear D1
00001376  4282                     540      CLR.L   D2                      ; Clear D2
00001378                           541  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
00001378  2239 000014A6            542      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000137E  2439 000014C2            543      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001384  D4B8 0008                544      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001388  B481                     545      CMP.L   D1,         D2          ; Do the Overlap ?
0000138A  6F00 0006                546      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
0000138E  6000 0044                547      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001392                           548  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001392  D2B8 000C                549      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001396  2439 000014C2            550      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000139C  B481                     551      CMP.L   D1,         D2          ; Do they OverLap ?
0000139E  6C00 0006                552      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
000013A2  6000 0030                553      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000013A6                           554  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000013A6  2239 000014AA            555      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000013AC  2439 000014C6            556      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
000013B2  D4B8 0008                557      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000013B6  B481                     558      CMP.L   D1,         D2          ; Do they Overlap ?
000013B8  6F00 0006                559      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
000013BC  6000 0016                560      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000013C0                           561  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
000013C0  D2B8 000C                562      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000013C4  2439 000014C6            563      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
000013CA  B481                     564      CMP.L   D1,         D2          ; Do they OverLap ?
000013CC  6C00 001C                565      BGE     COLLISION               ; Collision !
000013D0  6000 0002                566      BRA     COLLISION_CHECK_DONE    ; If not no collision
000013D4                           567  COLLISION_CHECK_DONE:               ; No Collision Update points
000013D4  5281                     568      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000013D6  D2B9 000014AE            569      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000013DC  23C1 000014AE            570      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000013E2  52B9 000014B2            571      ADD.L   #1, TEMP_SCORE          ; Change
000013E8  4E75                     572      RTS                             ; Return to subroutine
000013EA                           573  
000013EA                           574  COLLISION:
000013EA  6100 FEF6                575      BSR     PLAY_HIT                ; Play hit Wav
000013EE  53B9 000014CA            576      SUB.L   #1, LIVES               ; Subtract a Life
000013F4  0CB9 00000000 000014CA   577      CMP.L  #0,LIVES
000013FE  6700 0004                578      BEQ GAME_OVER
00001402  4E75                     579      RTS
00001404                           580  
00001404                           581  
00001404                           582  
00001404                           583  
00001404                           584  
00001404                           585  GAME_OVER:
00001404  6100 FEBE                586      BSR PLAY_GAME_OVER              ;Play Game Over Sound
00001408                           587      
00001408                           588      ;Reset Score
00001408  23FC 00000000 000014AE   589      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
00001412  23FC 00000000 000014B2   590      MOVE.L  #00, TEMP_SCORE         ; Reset New Score
0000141C                           591      
0000141C                           592      ; Clear the screen (see easy 68k help)
0000141C  103C 000B                593      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001420  323C FF00                594      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001424  4E4F                     595      TRAP    #15                     ; Trap (Perform action)
00001426                           596  
00001426                           597      
00001426                           598      ;Game Over Message -------------------------------------------------------------------------
00001426  103C 000B                599      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000142A  323C 2535                600      MOVE.W  #$2535,     D1          ; Col 02, Row 01
0000142E  4E4F                     601      TRAP    #15                     ; Trap (Perform action)
00001430  43F9 0000146D            602      LEA     GAME_OVER_MSG,  A1          ; Game Over Message
00001436  303C 000D                603      MOVE    #13,        D0          ; No Line feed
0000143A  4E4F                     604      TRAP    #15                     ; Trap (Perform action)
0000143C                           605      
0000143C                           606      ;Press any key to continue--------------------------------------------------------------------
0000143C                           607     
0000143C  103C 000B                608      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001440  323C 2530                609      MOVE.W  #$2530,     D1          ; Col 02, Row 01
00001444  4E4F                     610      TRAP    #15                     ; Trap (Perform action)
00001446  43F9 00001478            611      LEA     PRESS_ANY_KEY_MSG,  A1          ; Press Any Key Message
0000144C  303C 000D                612      MOVE    #13,        D0          ; No Line feed
00001450  4E4F                     613      TRAP    #15                     ; Trap (Perform action)
00001452                           614      
00001452                           615      
00001452                           616  
00001452                           617  
00001452                           618  
00001452                           619  
00001452                           620  
00001452                           621  
00001452                           622  
00001452                           623  
00001452                           624  
00001452                           625  *-----------------------------------------------------------
00001452                           626  * Subroutine    : EXIT
00001452                           627  * Description   : Exit message and End Game
00001452                           628  *---------------------------------------------------------
00001452                           629  
00001452                           630  
00001452                           631  ;EXIT:
00001452                           632      ; Show if Exiting is Running
00001452                           633  ;    MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001452                           634  ;    MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001452                           635  ;    TRAP    #15                     ; Trap (Perform action)
00001452                           636  ;    LEA     EXIT_MSG,   A1          ; Exit
00001452                           637  ;    MOVE    #13,        D0          ; No Line feed
00001452                           638  ;    TRAP    #15                     ; Trap (Perform action)
00001452                           639  ;    MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001452                           640  ;    TRAP    #15                     ; Trap (Perform action)
00001452                           641  
00001452                           642  
00001452                           643  *-----------------------------------------------------------
00001452                           644  * Section       : Messages
00001452                           645  * Description   : Messages to Print on Console, names should be
00001452                           646  * self documenting
00001452                           647  *-----------------------------------------------------------
00001452= 53 63 6F 72 65 20 ...    648  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
0000145B= 4C 69 76 65 73 20 ...    649  LIVES_MSG       DC.B    'Lives : ', 0       ; Lives Message
00001464= 53 63 6F 72 65 20 ...    650  NEW_SCORE_MSG   DC.B    'Score : ', 0
0000146D                           651  
0000146D= 47 41 4D 45 20 4F ...    652  GAME_OVER_MSG   DC.B    'GAME OVER:', 0               ;
00001478= 50 52 45 53 53 20 ...    653  PRESS_ANY_KEY_MSG  DC.B  'PRESS ANY KEY TO CONTINUE' 0 ;
00001491                           654  
00001491= 45 78 69 74 69 6E ...    655  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
0000149D                           656  
0000149D                           657  *-----------------------------------------------------------
0000149D                           658  * Section       : Graphic Colors
0000149D                           659  * Description   : Screen Pixel Color
0000149D                           660  *-----------------------------------------------------------
0000149D  =00FFFFFF                661  WHITE           EQU     $00FFFFFF
0000149D  =000000FF                662  RED             EQU     $000000FF
0000149D                           663  
0000149D                           664  *-----------------------------------------------------------
0000149D                           665  * Section       : Screen Size
0000149D                           666  * Description   : Screen Width and Height
0000149D                           667  *-----------------------------------------------------------
0000149E                           668  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000014A0                           669  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000014A2                           670  
000014A2                           671  *-----------------------------------------------------------
000014A2                           672  * Section       : Keyboard Input
000014A2                           673  * Description   : Used for storing Keypresses
000014A2                           674  *-----------------------------------------------------------
000014A2                           675  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000014A6                           676  
000014A6                           677  *-----------------------------------------------------------
000014A6                           678  * Section       : Character Positions
000014A6                           679  * Description   : Player and Enemy Position Memory Locations
000014A6                           680  *-----------------------------------------------------------
000014A6                           681  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000014AA                           682  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000014AE                           683  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000014B2                           684  TEMP_SCORE      DS.L    01  ; New Score System
000014B6                           685  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000014BA                           686  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000014BE                           687  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000014C2                           688  
000014C2                           689  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
000014C6                           690  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000014CA                           691  
000014CA                           692  LIVES           DS.L    01  ; Reserve Space for Lives        
000014CE                           693  
000014CE                           694  
000014CE                           695  
000014CE                           696  
000014CE                           697  *-----------------------------------------------------------
000014CE                           698  * Section       : Sounds
000014CE                           699  * Description   : Sound files, which are then loaded and given
000014CE                           700  * an address in memory, they take a longtime to process and play
000014CE                           701  * so keep the files small. Used https://voicemaker.in/ to 
000014CE                           702  * generate and Audacity to convert MP3 to WAV
000014CE                           703  *-----------------------------------------------------------
000014CE= 6A 75 6D 70 2E 77 ...    704  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
000014D7= 72 75 6E 2E 77 61 ...    705  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
000014DF= 6F 70 70 73 2E 77 ...    706  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
000014E8= 67 61 6D 65 5F 6F ...    707  GAME_OVER_WAV   DC.B    'game_over.wav',0   ; Game Over Sound
000014F6= 68 69 74 2E 77 61 ...    708  HIT_WAV         DC.B    'hit.wav',0           ; Collision Sound
000014FE= 6D 61 69 6E 6D 75 ...    709  MAIN_MUSIC_WAV  DC.B    'mainmusic.wav',0
0000150C                           710  
0000150C                           711      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    1374
COLLISION           13EA
COLLISION_CHECK_DONE  13D4
CURRENT_KEY         14A2
DRAW                117E
DRAW_ENEMY          1344
DRAW_PLAYER         130C
DRAW_PLYR_DATA      119C
ENEMY_X             14C2
ENEMY_Y             14C6
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT_MSG            1491
GAME                10AE
GAMELOOP            10B2
GAME_OVER           1404
GAME_OVER_INDEX     3
GAME_OVER_LOAD      12B2
GAME_OVER_MSG       146D
GAME_OVER_WAV       14E8
GND_FALSE           0
GND_TRUE            1
HIT_INDEX           2
HIT_LOAD            12D0
HIT_WAV             14F6
IDLE                1270
INITIALISE          1000
INPUT               10E0
IS_PLAYER_ON_GND    11F8
JMP_INDEX           1
JUMP                124C
JUMP_DONE           126E
JUMP_LOAD           1294
JUMP_WAV            14CE
LIVES               14CA
LIVES_MSG           145B
MAIN_MUSIC_INDEX    4
MAIN_MUSIC_LOAD     12EE
MAIN_MUSIC_WAV      14FE
MOVE_ENEMY          1162
NEW_SCORE_MSG       1464
OPPS_WAV            14DF
PERFORM_JUMP        125E
PLAYER_SCORE        14AE
PLAYER_X            14A6
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  1378
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1392
PLAYER_Y            14AA
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  13A6
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  13C0
PLAY_GAME_OVER      12C4
PLAY_HIT            12E2
PLAY_JUMP           12A6
PLAY_MAIN_MUSIC     1300
PLAY_RUN            1288
PLYR_DFLT_G         1
PLYR_DFLT_V         F
PLYR_GRAVITY        14BA
PLYR_H_INIT         C
PLYR_JUMP_V         FFFFFFF1
PLYR_ON_GND         14BE
PLYR_VELOCITY       14B6
PLYR_W_INIT         C
POINTS              1
PRESS_ANY_KEY_MSG   1478
PROCESS_INPUT       10FE
RED                 FF
RESET_ENEMY_POSITION  116E
RUN_INDEX           0
RUN_LOAD            1276
RUN_WAV             14D7
SCORE_MSG           1452
SCREEN_H            14A0
SCREEN_W            149E
SET_OFF_GROUND      1240
SET_ON_GROUND       1218
SPACEBAR            20
START               1000
SUB_AMOUNT          A
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
TEMP_SCORE          14B2
UPDATE              1126
WAIT                10D2
WHITE               FFFFFF
